services:

  airflow-custom:
    build:
      context: .
      dockerfile: dockerfiles/airflow_dockerfiles/airflow.Dockerfile
#      dockerfile: dockerfiles/airflow_dockerfiles/Dockerfile
    container_name: airflow-custom
    networks:
      - my-bridge-network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: standalone
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
#      - ./logs:/opt/airflow/logs

  airflow-postgres:
    image: postgres:14
    container_name: airflow-postgres
    networks:
      - my-bridge-network
    restart: always
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data

  airflow-init:
    build:
      context: .
      dockerfile: dockerfiles/airflow_dockerfiles/airflow.Dockerfile
#      dockerfile: dockerfiles/airflow_dockerfiles/Dockerfile
    container_name: airflow-init
    networks:
      - my-bridge-network
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    entrypoint: >
      /bin/bash -c
      "airflow db migrate && airflow users create \
      --username airflow \
      --password airflow \
      --firstname admin \
      --lastname admin \
      --role Admin \
      --email admin@example.com"
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
#      - ./logs:/opt/airflow/logs

  airflow-webserver:
    build:
      context: .
      dockerfile: dockerfiles/airflow_dockerfiles/airflow.Dockerfile
#      dockerfile: dockerfiles/airflow_dockerfiles/Dockerfile
    container_name: airflow-webserver
    networks:
      - my-bridge-network
    command: webserver
    depends_on:
      - airflow-postgres
      - airflow-init
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
#      - ./logs:/opt/airflow/logs

  airflow-scheduler:
    build:
      context: .
      dockerfile: dockerfiles/airflow_dockerfiles/airflow.Dockerfile
    container_name: airflow-scheduler
    networks:
      - my-bridge-network
    command: scheduler
    depends_on:
      - airflow-postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
#      - ./logs:/opt/airflow/logs
#      - /var/run/docker.sock:/var/run/docker.sock:rw

volumes:
  airflow-postgres-db-volume:

networks:
  my-bridge-network:
    external: true