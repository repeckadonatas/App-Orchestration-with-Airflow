# COMMON SETTINGS FOR AIRFLOW SERVICES
x-airflow-common: &airflow-common
  networks:
    - my-bridge-network
  env_file:
    - .env
  environment:
    PYTHONPATH: /opt/airflow:/opt/airflow/src
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTOR: 'LocalExecutor'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    AIRFLOW__CORE__ALLOW_PICKLE_DESERIALIZE: 'true'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__ALLOWED_DESERIALIZATION_CLASSES: airflow.* astro.*
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    user: "${AIRFLOW_UID:-50000}:0"
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./dags:/opt/airflow/dags:rw
    - ./logs:/opt/airflow/logs:rw
    - ./src:/opt/airflow/src:rw
    - /etc/localtime:/etc/localtime:ro


# COMMON SETTINGS FOR APP SERVICES
x-app-common: &app-common
  networks:
    - my-bridge-network
  env_file:
    - .env
  environment:
    PGUSER: ${PGUSER}
    PGPASSWORD: ${PGPASSWORD}
    PGPORT: ${PGPORT}
    PGDATABASE: ${PGDATABASE}
    PGHOST: ${PGHOST}

services:

  project-db:
    <<: *app-common
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "trust"  # SHOULD NOT BE USED IN PROD ENVIRONMENT!!
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 20s
      retries: 5
    volumes:
      - project-db-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql

  project-app:
    <<: *app-common
    image: notexists/job-application-system-app:1.1
#    command: ["sleep", "1d"]  # FOR CONTAINER CHECK UP
    depends_on:
      project-db:
        condition: service_healthy
    volumes:
#      - /mnt/d/TURING/PROJECTS/MODULE_3/Job-Application-System/logs:/app/logs/
      - ./logs:/app/logs/

  project-backup-app:
    <<: *app-common
    image: notexists/db-backup-app:1.1
#    command: ["sleep", "1d"]  # FOR CONTAINER CHECK UP
    depends_on:
      project-db:
        condition: service_healthy
      project-app:
        condition: service_completed_successfully
    volumes:
      - ./logs:/app/logs/
      - ./backups:/app/backups/

  airflow-postgres:
    <<: *airflow-common
    image: postgres:14
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
      - /var/run/docker.sock:/var/run/docker.sock
    user: "0:0"

  airflow-init:
    <<: *airflow-common
    image: apache/airflow:latest-python3.11
    depends_on:
      - airflow-postgres
    entrypoint: >
      /bin/bash -c
      "airflow db migrate && airflow users create \
      --username airflow \
      --password airflow \
      --firstname admin \
      --lastname admin \
      --role Admin \
      --email admin@example.com"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    image: apache/airflow:latest-python3.11
    command: webserver
    depends_on:
      - airflow-postgres
      - airflow-init
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    user: "0:0"

  airflow-scheduler:
    <<: *airflow-common
    image: apache/airflow:latest-python3.11
    command: scheduler
    depends_on:
      - airflow-postgres
      - airflow-init
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

volumes:
  airflow-db-volume:
    driver: local
  project-db-data:
    driver: local

networks:
  my-bridge-network:
    driver: bridge
    external: true
